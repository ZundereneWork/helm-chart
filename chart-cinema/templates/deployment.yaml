{{- range $key, $val := .Values }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $key }}
  namespace: cinema
  labels:
    nombre: {{ $key }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ $key  }}
  template:
    metadata:
      labels:
        app: {{ $key  }}
    spec:
      containers:
        - name: {{ $key  }}
          image: {{ $val.Image }}
          imagePullPolicy: Always
          ports:
            - containerPort: {{  $val.Service.port }}
          env:
          {{- range $key, $value := $val.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
          {{- end }}
          volumeMounts:
            {{- range $name, $data :=  $val.Volumes }}
            - name: {{ $name }}
              mountPath: {{ $data.mountPath }}
            {{- end }}
            {{- if or (eq $key "sonarr") ( eq $key "radarr")  ( eq $key "prowlarr") (eq $key "readarr") }}
            - name: config-volume
              mountPath: /config_example
            {{- end }}
          readinessProbe:
            tcpSocket:
              port: {{  $val.Service.port }}
            initialDelaySeconds:  {{ $val.readinessProbe.Seconds  }}
            periodSeconds: 30
          livenessProbe:
            tcpSocket:
              port: {{  $val.Service.port }}
            initialDelaySeconds: {{ $val.livenessProbe.Seconds }}
            periodSeconds: 30
          # {{- if eq $key "jellyfin"  }}
          # resources:
          #   limits:
          #     amd.com/gpu: 1 # requesting 1 GPU
          # {{- end }}
          {{- if or (eq $key "sonarr") ( eq $key "radarr") ( eq $key "prowlarr") (eq $key "readarr")  }}
          lifecycle:
            postStart:
              exec:
                command: ['sh', '-c', 'cp /config_example/config.xml /config/config.xml'] 
          {{- end }}
          

      volumes:
      {{- range $name, $data :=  $val.Volumes }}
      - name: {{ $name }}
      {{- if eq $data.type  "volumenClain" }}
        persistentVolumeClaim:
          claimName: pvc-{{ $key }}
      {{- else if eq  $data.type  "nfs" }}
        nfs:
            server: {{ $data.server }}
            path: {{ $data.path }}
      {{- end }}
      {{- end }}
      {{- if or (eq $key "sonarr") ( eq $key "radarr")  ( eq $key "prowlarr") (eq $key "readarr")  }}
      - name: config-volume
        configMap:
          name: {{$key}}-config
      {{- end }}
---
{{- end }} 





